!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	context/makefile	/^AR := $(ARCH)ar$/;"	m
ARCH	context/makefile	/^ARCH :=$/;"	m
ARCH	uart/makefile	/^ARCH := $/;"	m
Block	uart/comport.cpp	/^bool ComPort::Block(bool b)$/;"	f	class:ComPort
CC	context/makefile	/^CC := $(ARCH)g++$/;"	m
CC	uart/makefile	/^CC := $(ARCH)g++$/;"	m
CRC16	context/modbuscrc16.h	8;"	d
CalcCrc	service/mcontext.cpp	/^uint16_t X03Request::CalcCrc(void)$/;"	f	class:X03Request
CalcCrc	service/mcontext.cpp	/^uint16_t X03Response::CalcCrc(void)$/;"	f	class:X03Response
CalcCrc	service/mcontext.cpp	/^uint16_t X10Request::CalcCrc(void)$/;"	f	class:X10Request
CalcCrc	service/mcontext.cpp	/^uint16_t X10Response::CalcCrc(void)$/;"	f	class:X10Response
Check	service/mcontext.cpp	/^bool X03Request::Check(void)$/;"	f	class:X03Request
Check	service/mcontext.cpp	/^bool X03Response::Check(void)$/;"	f	class:X03Response
Check	service/mcontext.cpp	/^bool X10Request::Check(void)$/;"	f	class:X10Request
Check	service/mcontext.cpp	/^bool X10Response::Check(void)$/;"	f	class:X10Response
CheckRequest	context/modbuscontext.c	/^int CheckRequest(uint8_t mac, uint8_t *data, int len)$/;"	f
CheckRequest	service/mcontext.cpp	/^bool Mcontext::CheckRequest(void)$/;"	f	class:Mcontext
CheckResponse	context/modbuscontext.c	/^int CheckResponse(uint8_t mac, uint8_t *data, int len)$/;"	f
CheckResponse	service/mcontext.cpp	/^bool Mcontext::CheckResponse(void)$/;"	f	class:Mcontext
Close	uart/comport.cpp	/^bool ComPort::Close(void)$/;"	f	class:ComPort
ComPort	uart/comport.h	/^	ComPort(void):fd(-1){}$/;"	f	class:ComPort
ComPort	uart/comport.h	/^class ComPort$/;"	c
Config	uart/comport.cpp	/^bool ComPort::Config(int baud, char parity, int bsize, int stop)$/;"	f	class:ComPort
GetBcount	service/mcontext.cpp	/^uint8_t X03Response::GetBcount(void)$/;"	f	class:X03Response
GetBcount	service/mcontext.cpp	/^uint8_t X10Request::GetBcount(void)$/;"	f	class:X10Request
GetCount	service/mcontext.cpp	/^uint16_t X03Request::GetCount(void)$/;"	f	class:X03Request
GetCount	service/mcontext.cpp	/^uint16_t X10Request::GetCount(void)$/;"	f	class:X10Request
GetCount	service/mcontext.cpp	/^uint16_t X10Response::GetCount(void)$/;"	f	class:X10Response
GetCrc	service/mcontext.cpp	/^uint16_t X03Request::GetCrc(void)$/;"	f	class:X03Request
GetCrc	service/mcontext.cpp	/^uint16_t X03Response::GetCrc(void)$/;"	f	class:X03Response
GetCrc	service/mcontext.cpp	/^uint16_t X10Request::GetCrc(void)$/;"	f	class:X10Request
GetCrc	service/mcontext.cpp	/^uint16_t X10Response::GetCrc(void)$/;"	f	class:X10Response
GetData	service/mcontext.cpp	/^uint16_t X03Response::GetData(uint8_t i)$/;"	f	class:X03Response
GetData	service/mcontext.cpp	/^uint16_t X10Request::GetData(uint8_t i)$/;"	f	class:X10Request
GetFcode	service/mcontext.cpp	/^uint8_t Mcontext::GetFcode(void)$/;"	f	class:Mcontext
GetFcode	service/mcontext.cpp	/^uint8_t X03Request::GetFcode(void)$/;"	f	class:X03Request
GetFcode	service/mcontext.cpp	/^uint8_t X03Response::GetFcode(void)$/;"	f	class:X03Response
GetFcode	service/mcontext.cpp	/^uint8_t X10Request::GetFcode(void)$/;"	f	class:X10Request
GetFcode	service/mcontext.cpp	/^uint8_t X10Response::GetFcode(void)$/;"	f	class:X10Response
GetLength	service/mcontext.cpp	/^uint8_t Mcontext::GetLength(void)$/;"	f	class:Mcontext
GetLength	service/mcontext.cpp	/^uint8_t X03Request::GetLength(void)$/;"	f	class:X03Request
GetLength	service/mcontext.cpp	/^uint8_t X03Response::GetLength(void)$/;"	f	class:X03Response
GetLength	service/mcontext.cpp	/^uint8_t X10Request::GetLength(void)$/;"	f	class:X10Request
GetLength	service/mcontext.cpp	/^uint8_t X10Response::GetLength(void)$/;"	f	class:X10Response
GetOffset	service/mcontext.cpp	/^uint16_t X03Request::GetOffset(void)$/;"	f	class:X03Request
GetOffset	service/mcontext.cpp	/^uint16_t X10Request::GetOffset(void)$/;"	f	class:X10Request
GetOffset	service/mcontext.cpp	/^uint16_t X10Response::GetOffset(void)$/;"	f	class:X10Response
GetSlave	service/mcontext.cpp	/^uint8_t X03Request::GetSlave(void)$/;"	f	class:X03Request
GetSlave	service/mcontext.cpp	/^uint8_t X03Response::GetSlave(void)$/;"	f	class:X03Response
GetSlave	service/mcontext.cpp	/^uint8_t X10Request::GetSlave(void)$/;"	f	class:X10Request
GetSlave	service/mcontext.cpp	/^uint8_t X10Response::GetSlave(void)$/;"	f	class:X10Response
GetX03Request	service/mcontext.cpp	/^X03Request& Mcontext::GetX03Request(void)$/;"	f	class:Mcontext
GetX03Response	service/mcontext.cpp	/^X03Response& Mcontext::GetX03Response(void)$/;"	f	class:Mcontext
GetX10Request	service/mcontext.cpp	/^X10Request& Mcontext::GetX10Request(void)$/;"	f	class:Mcontext
GetX10Response	service/mcontext.cpp	/^X10Response& Mcontext::GetX10Response(void)$/;"	f	class:Mcontext
Init	service/mcontext.cpp	/^void Mcontext::Init(void)$/;"	f	class:Mcontext
Init	service/modbus.cpp	/^bool Modbus::Init(const string& dev, int baud, int parity, int bsize, int stop)$/;"	f	class:Modbus
LIb	context/makefile	/^LIb := modbuscontext.a$/;"	m
MBContext	context/modbuscontext.h	/^}MBContext;$/;"	t	typeref:struct:__anon7
MBContextCheckRequest	context/modbuscontext.c	/^uint8_t MBContextCheckRequest(MBContext* m)$/;"	f
MBContextCheckResponse	context/modbuscontext.c	/^uint8_t MBContextCheckResponse(MBContext* m)$/;"	f
MBContextCheckX03Request	context/modbuscontext.c	/^uint8_t MBContextCheckX03Request(MBContext* m)$/;"	f
MBContextCheckX03Response	context/modbuscontext.c	/^uint8_t MBContextCheckX03Response(MBContext* m)$/;"	f
MBContextCheckX10Request	context/modbuscontext.c	/^uint8_t MBContextCheckX10Request(MBContext* m)$/;"	f
MBContextCheckX10Response	context/modbuscontext.c	/^uint8_t MBContextCheckX10Response(MBContext* m)$/;"	f
MBContextFcodeType	context/modbuscontext.h	/^}MBContextFcodeType;$/;"	t	typeref:enum:__anon6
MBContextFcodeX03	context/modbuscontext.h	/^	MBContextFcodeX03 = 0x03,$/;"	e	enum:__anon6
MBContextFcodeX10	context/modbuscontext.h	/^	MBContextFcodeX10 = 0x10,$/;"	e	enum:__anon6
MBContextGetFcode	context/modbuscontext.c	/^uint8_t MBContextGetFcode(MBContext* m)$/;"	f
MBContextGetLength	context/modbuscontext.c	/^uint8_t MBContextGetLength(MBContext* m)$/;"	f
MBContextGetX03RequestContext	context/modbuscontext.c	/^X03RequestContext* MBContextGetX03RequestContext(MBContext* m)$/;"	f
MBContextGetX03ResponseContext	context/modbuscontext.c	/^X03ResponseContext* MBContextGetX03ResponseContext(MBContext* m)$/;"	f
MBContextGetX10RequestContext	context/modbuscontext.c	/^X10RequestContext* MBContextGetX10RequestContext(MBContext* m)$/;"	f
MBContextGetX10ResponseContext	context/modbuscontext.c	/^X10ResponseContext* MBContextGetX10ResponseContext(MBContext* m)$/;"	f
MBContextIndexFcode	context/modbuscontext.h	/^	MBContextIndexFcode = 1,$/;"	e	enum:__anon5
MBContextIndexSlave	context/modbuscontext.h	/^	MBContextIndexSlave = 0,$/;"	e	enum:__anon5
MBContextIndexType	context/modbuscontext.h	/^}MBContextIndexType;$/;"	t	typeref:enum:__anon5
MBContextInit	context/modbuscontext.c	/^void MBContextInit(MBContext* m)$/;"	f
MBContextPush	context/modbuscontext.c	/^void MBContextPush(MBContext* m, uint8_t c)$/;"	f
MBContextSetMac	context/modbuscontext.c	/^void MBContextSetMac(MBContext *m, uint8_t c)$/;"	f
Mcontext	service/mcontext.cpp	/^Mcontext::Mcontext(void)$/;"	f	class:Mcontext
Mcontext	service/mcontext.h	/^class Mcontext$/;"	c
Modbus	service/modbus.cpp	/^Modbus::Modbus(void)$/;"	f	class:Modbus
Modbus	service/modbus.h	/^class Modbus$/;"	c
Mode_232	uart/uart.h	/^	Mode_232 = 2,$/;"	e	enum:__anon17
Mode_422	uart/uart.h	/^	Mode_422 = 0,$/;"	e	enum:__anon17
Mode_485	uart/uart.h	/^	Mode_485 = 1,$/;"	e	enum:__anon17
OBJ	context/makefile	/^OBJ := $(patsubst %.c, %.o, $(SRC))$/;"	m
Open	uart/comport.cpp	/^bool ComPort::Open(const string& path)$/;"	f	class:ComPort
ProcContext	service/modbus.cpp	/^void Modbus::ProcContext(void)$/;"	f	class:Modbus
Push	service/mcontext.cpp	/^void Mcontext::Push(unsigned char c)	$/;"	f	class:Mcontext
Recv	uart/comport.cpp	/^int ComPort::Recv(unsigned char *buf, int len)$/;"	f	class:ComPort
Run	service/modbus.cpp	/^void Modbus::Run(void)$/;"	f	class:Modbus
SRC	context/makefile	/^SRC := $(wildcard *.c)$/;"	m
SRC	uart/makefile	/^SRC := $(wildcard *.c)$/;"	m
Send	uart/comport.cpp	/^int  ComPort::Send(unsigned char *data, int len)$/;"	f	class:ComPort
SetBcount	service/mcontext.cpp	/^void X03Response::SetBcount(uint8_t bcount)$/;"	f	class:X03Response
SetBcount	service/mcontext.cpp	/^void X10Request::SetBcount(uint8_t bcount)$/;"	f	class:X10Request
SetCount	service/mcontext.cpp	/^void X03Request::SetCount(uint16_t count)$/;"	f	class:X03Request
SetCount	service/mcontext.cpp	/^void X10Request::SetCount(uint16_t count)$/;"	f	class:X10Request
SetCount	service/mcontext.cpp	/^void X10Response::SetCount(uint16_t count)$/;"	f	class:X10Response
SetCrc	service/mcontext.cpp	/^void X03Request::SetCrc(uint16_t crc)$/;"	f	class:X03Request
SetCrc	service/mcontext.cpp	/^void X03Response::SetCrc(uint16_t crc)$/;"	f	class:X03Response
SetCrc	service/mcontext.cpp	/^void X10Request::SetCrc(uint16_t crc)$/;"	f	class:X10Request
SetCrc	service/mcontext.cpp	/^void X10Response::SetCrc(uint16_t crc)$/;"	f	class:X10Response
SetData	service/mcontext.cpp	/^void X03Response::SetData(uint8_t i, uint16_t data)$/;"	f	class:X03Response
SetData	service/mcontext.cpp	/^void X10Request::SetData(uint8_t i, uint16_t data)$/;"	f	class:X10Request
SetFcode	service/mcontext.cpp	/^void X03Request::SetFcode(uint8_t fcode)$/;"	f	class:X03Request
SetFcode	service/mcontext.cpp	/^void X03Response::SetFcode(uint8_t fcode)$/;"	f	class:X03Response
SetFcode	service/mcontext.cpp	/^void X10Request::SetFcode(uint8_t fcode)$/;"	f	class:X10Request
SetFcode	service/mcontext.cpp	/^void X10Response::SetFcode(uint8_t fcode)$/;"	f	class:X10Response
SetMac	service/mcontext.cpp	/^void Mcontext::SetMac(unsigned char c)$/;"	f	class:Mcontext
SetOffset	service/mcontext.cpp	/^void X03Request::SetOffset(uint16_t offset)$/;"	f	class:X03Request
SetOffset	service/mcontext.cpp	/^void X10Request::SetOffset(uint16_t offset)$/;"	f	class:X10Request
SetOffset	service/mcontext.cpp	/^void X10Response::SetOffset(uint16_t offset)$/;"	f	class:X10Response
SetSlave	service/mcontext.cpp	/^void X03Request::SetSlave(uint8_t slave)$/;"	f	class:X03Request
SetSlave	service/mcontext.cpp	/^void X03Response::SetSlave(uint8_t slave)$/;"	f	class:X03Response
SetSlave	service/mcontext.cpp	/^void X10Request::SetSlave(uint8_t slave)$/;"	f	class:X10Request
SetSlave	service/mcontext.cpp	/^void X10Response::SetSlave(uint8_t slave)$/;"	f	class:X10Response
TARGET	context/makefile	/^TARGET := X03Request.exe X03Response.exe$/;"	m
TIOCSERMODE	uart/uart.h	16;"	d
TestX03Request	context/modbuscontext.c	/^void TestX03Request(X03RequestContext* x)$/;"	f
TestX03Response	context/modbuscontext.c	/^void TestX03Response(X03ResponseContext* x)$/;"	f
TestX10Request	context/modbuscontext.c	/^void TestX10Request(X10RequestContext* x)$/;"	f
TestX10Response	context/modbuscontext.c	/^void TestX10Response(X10ResponseContext* x)$/;"	f
X03Request	service/mcontext.h	/^class X03Request: public Mcontext$/;"	c
X03RequestCalcCrc	context/x03request.c	/^uint16_t X03RequestCalcCrc(X03RequestContext* ctx)$/;"	f
X03RequestCheck	context/x03request.c	/^uint8_t X03RequestCheck(X03RequestContext* ctx)$/;"	f
X03RequestContext	context/x03request.h	/^}X03RequestContext;$/;"	t	typeref:struct:__anon16
X03RequestCountMax	context/x03request.h	/^	X03RequestCountMax = 125 $/;"	e	enum:__anon15
X03RequestCountMin	context/x03request.h	/^	X03RequestCountMin = 1,$/;"	e	enum:__anon15
X03RequestCountType	context/x03request.h	/^}X03RequestCountType;$/;"	t	typeref:enum:__anon15
X03RequestGetCount	context/x03request.c	/^uint16_t X03RequestGetCount(X03RequestContext* ctx)$/;"	f
X03RequestGetCrc	context/x03request.c	/^uint16_t X03RequestGetCrc(X03RequestContext* ctx)$/;"	f
X03RequestGetFcode	context/x03request.c	/^uint8_t X03RequestGetFcode(X03RequestContext* ctx)$/;"	f
X03RequestGetLength	context/x03request.c	/^uint8_t X03RequestGetLength(X03RequestContext* ctx)$/;"	f
X03RequestGetOffset	context/x03request.c	/^uint16_t X03RequestGetOffset(X03RequestContext* ctx)$/;"	f
X03RequestGetSlave	context/x03request.c	/^uint8_t X03RequestGetSlave(X03RequestContext* ctx)$/;"	f
X03RequestIndex	context/x03request.h	/^}X03RequestIndex;$/;"	t	typeref:enum:__anon14
X03RequestIndexCount0	context/x03request.h	/^	X03RequestIndexCount0 = 4,$/;"	e	enum:__anon14
X03RequestIndexCount1	context/x03request.h	/^	X03RequestIndexCount1 = 5,$/;"	e	enum:__anon14
X03RequestIndexCrc0	context/x03request.h	/^	X03RequestIndexCrc0 = 6,$/;"	e	enum:__anon14
X03RequestIndexCrc1	context/x03request.h	/^	X03RequestIndexCrc1 = 7,$/;"	e	enum:__anon14
X03RequestIndexFcode	context/x03request.h	/^	X03RequestIndexFcode = 1,$/;"	e	enum:__anon14
X03RequestIndexMax	context/x03request.h	/^	X03RequestIndexMax = 8$/;"	e	enum:__anon14
X03RequestIndexOffset0	context/x03request.h	/^	X03RequestIndexOffset0= 2,$/;"	e	enum:__anon14
X03RequestIndexOffset1	context/x03request.h	/^	X03RequestIndexOffset1= 3,$/;"	e	enum:__anon14
X03RequestIndexSlave	context/x03request.h	/^	X03RequestIndexSlave = 0,$/;"	e	enum:__anon14
X03RequestSetCount	context/x03request.c	/^void X03RequestSetCount(X03RequestContext* ctx, uint16_t s)$/;"	f
X03RequestSetCrc	context/x03request.c	/^void X03RequestSetCrc(X03RequestContext* ctx, uint16_t crc)$/;"	f
X03RequestSetFcode	context/x03request.c	/^void X03RequestSetFcode(X03RequestContext* ctx, uint8_t c)$/;"	f
X03RequestSetOffset	context/x03request.c	/^void X03RequestSetOffset(X03RequestContext* ctx, uint16_t s)$/;"	f
X03RequestSetSlave	context/x03request.c	/^void X03RequestSetSlave(X03RequestContext* ctx, uint8_t c)$/;"	f
X03RequestShowContext	context/x03request.c	/^void X03RequestShowContext(X03RequestContext* ctx)$/;"	f
X03Response	service/mcontext.h	/^class X03Response: public Mcontext$/;"	c
X03ResponseBcountMax	context/x03response.h	/^	X03ResponseBcountMax = X03RequestCountMax * 2,$/;"	e	enum:__anon9
X03ResponseBcountMin	context/x03response.h	/^	X03ResponseBcountMin = X03RequestCountMin * 2,$/;"	e	enum:__anon9
X03ResponseBcountType	context/x03response.h	/^}X03ResponseBcountType;$/;"	t	typeref:enum:__anon9
X03ResponseCalcCrc	context/x03response.c	/^uint16_t X03ResponseCalcCrc(X03ResponseContext* ctx)$/;"	f
X03ResponseCheck	context/x03response.c	/^uint8_t X03ResponseCheck(X03ResponseContext* ctx)$/;"	f
X03ResponseContext	context/x03response.h	/^}X03ResponseContext;$/;"	t	typeref:struct:__anon10
X03ResponseGetBcount	context/x03response.c	/^uint8_t X03ResponseGetBcount(X03ResponseContext* ctx)$/;"	f
X03ResponseGetCrc	context/x03response.c	/^uint16_t X03ResponseGetCrc(X03ResponseContext* ctx)$/;"	f
X03ResponseGetData	context/x03response.c	/^uint16_t X03ResponseGetData(X03ResponseContext* ctx, uint8_t i)$/;"	f
X03ResponseGetFcode	context/x03response.c	/^uint8_t X03ResponseGetFcode(X03ResponseContext* ctx)$/;"	f
X03ResponseGetLength	context/x03response.c	/^uint8_t X03ResponseGetLength(X03ResponseContext* ctx)$/;"	f
X03ResponseGetSlave	context/x03response.c	/^uint8_t X03ResponseGetSlave(X03ResponseContext* ctx)$/;"	f
X03ResponseIndex	context/x03response.h	/^}X03ResponseIndex;$/;"	t	typeref:enum:__anon8
X03ResponseIndexBcount	context/x03response.h	/^	X03ResponseIndexBcount= 2,$/;"	e	enum:__anon8
X03ResponseIndexData	context/x03response.h	/^	X03ResponseIndexData = 3,$/;"	e	enum:__anon8
X03ResponseIndexFcode	context/x03response.h	/^	X03ResponseIndexFcode = 1,$/;"	e	enum:__anon8
X03ResponseIndexSlave	context/x03response.h	/^	X03ResponseIndexSlave = 0,$/;"	e	enum:__anon8
X03ResponseSetBcount	context/x03response.c	/^void X03ResponseSetBcount(X03ResponseContext* ctx, uint8_t c)$/;"	f
X03ResponseSetCrc	context/x03response.c	/^void X03ResponseSetCrc(X03ResponseContext* ctx, uint16_t crc)$/;"	f
X03ResponseSetData	context/x03response.c	/^void X03ResponseSetData(X03ResponseContext* ctx, uint8_t i, uint16_t data)$/;"	f
X03ResponseSetFcode	context/x03response.c	/^void X03ResponseSetFcode(X03ResponseContext* ctx, uint8_t c)$/;"	f
X03ResponseSetSlave	context/x03response.c	/^void X03ResponseSetSlave(X03ResponseContext* ctx, uint8_t c)$/;"	f
X03ResponseShowContext	context/x03response.c	/^void X03ResponseShowContext(X03ResponseContext* ctx)$/;"	f
X10Request	service/mcontext.h	/^class X10Request: public Mcontext$/;"	c
X10RequestBcountMax	context/x10request.h	/^	X10RequestBcountMax = X10RequestCountMax * 2,$/;"	e	enum:__anon3
X10RequestBcountMin	context/x10request.h	/^	X10RequestBcountMin = X10RequestCountMin * 2,$/;"	e	enum:__anon3
X10RequestBcountType	context/x10request.h	/^}X10RequestBcountType;$/;"	t	typeref:enum:__anon3
X10RequestCalcCrc	context/x10request.c	/^uint16_t X10RequestCalcCrc(X10RequestContext* ctx)$/;"	f
X10RequestCheck	context/x10request.c	/^uint8_t X10RequestCheck(X10RequestContext* ctx)$/;"	f
X10RequestContext	context/x10request.h	/^}X10RequestContext;$/;"	t	typeref:struct:__anon4
X10RequestCountMax	context/x10request.h	/^	X10RequestCountMax = 123 $/;"	e	enum:__anon2
X10RequestCountMin	context/x10request.h	/^	X10RequestCountMin = 1,$/;"	e	enum:__anon2
X10RequestCountType	context/x10request.h	/^}X10RequestCountType;$/;"	t	typeref:enum:__anon2
X10RequestGetBcount	context/x10request.c	/^uint8_t  X10RequestGetBcount(X10RequestContext* ctx)$/;"	f
X10RequestGetCount	context/x10request.c	/^uint16_t X10RequestGetCount(X10RequestContext* ctx)$/;"	f
X10RequestGetCrc	context/x10request.c	/^uint16_t X10RequestGetCrc(X10RequestContext* ctx)$/;"	f
X10RequestGetFcode	context/x10request.c	/^uint8_t X10RequestGetFcode(X10RequestContext* ctx)$/;"	f
X10RequestGetLength	context/x10request.c	/^uint8_t X10RequestGetLength(X10RequestContext* ctx)$/;"	f
X10RequestGetOffset	context/x10request.c	/^uint16_t X10RequestGetOffset(X10RequestContext* ctx)$/;"	f
X10RequestGetSlave	context/x10request.c	/^uint8_t X10RequestGetSlave(X10RequestContext* ctx)$/;"	f
X10RequestIndex	context/x10request.h	/^}X10RequestIndex;$/;"	t	typeref:enum:__anon1
X10RequestIndexBcount	context/x10request.h	/^	X10RequestIndexBcount = 6,$/;"	e	enum:__anon1
X10RequestIndexCount0	context/x10request.h	/^	X10RequestIndexCount0 = 4,$/;"	e	enum:__anon1
X10RequestIndexCount1	context/x10request.h	/^	X10RequestIndexCount1 = 5,$/;"	e	enum:__anon1
X10RequestIndexData	context/x10request.h	/^	X10RequestIndexData = 7,$/;"	e	enum:__anon1
X10RequestIndexFcode	context/x10request.h	/^	X10RequestIndexFcode = 1,$/;"	e	enum:__anon1
X10RequestIndexOffset0	context/x10request.h	/^	X10RequestIndexOffset0 = 2,$/;"	e	enum:__anon1
X10RequestIndexOffset1	context/x10request.h	/^	X10RequestIndexOffset1 = 3,$/;"	e	enum:__anon1
X10RequestIndexSlave	context/x10request.h	/^	X10RequestIndexSlave = 0,$/;"	e	enum:__anon1
X10RequestSetBcount	context/x10request.c	/^void X10RequestSetBcount(X10RequestContext* ctx, uint8_t c)$/;"	f
X10RequestSetCount	context/x10request.c	/^void X10RequestSetCount(X10RequestContext* ctx, uint16_t s)$/;"	f
X10RequestSetCrc	context/x10request.c	/^void X10RequestSetCrc(X10RequestContext* ctx, uint16_t s)$/;"	f
X10RequestSetData	context/x10request.c	/^void X10RequestSetData(X10RequestContext* ctx, uint8_t i, uint16_t s)$/;"	f
X10RequestSetFcode	context/x10request.c	/^void X10RequestSetFcode(X10RequestContext* ctx, uint8_t c)$/;"	f
X10RequestSetOffset	context/x10request.c	/^void X10RequestSetOffset(X10RequestContext* ctx, uint16_t s)$/;"	f
X10RequestSetSlave	context/x10request.c	/^void X10RequestSetSlave(X10RequestContext* ctx, uint8_t c)$/;"	f
X10RequestShowContext	context/x10request.c	/^void X10RequestShowContext(X10RequestContext* ctx)$/;"	f
X10Response	service/mcontext.h	/^class X10Response: public Mcontext$/;"	c
X10ResponseCalcCrc	context/x10response.c	/^uint16_t X10ResponseCalcCrc(X10ResponseContext* ctx)$/;"	f
X10ResponseCheck	context/x10response.c	/^uint8_t X10ResponseCheck(X10ResponseContext* ctx)$/;"	f
X10ResponseContext	context/x10response.h	/^}X10ResponseContext;$/;"	t	typeref:struct:__anon13
X10ResponseCountMax	context/x10response.h	/^	X10ResponseCountMax = 123 $/;"	e	enum:__anon12
X10ResponseCountMin	context/x10response.h	/^	X10ResponseCountMin = 1,$/;"	e	enum:__anon12
X10ResponseCountType	context/x10response.h	/^}X10ResponseCountType;$/;"	t	typeref:enum:__anon12
X10ResponseGetCount	context/x10response.c	/^uint16_t X10ResponseGetCount(X10ResponseContext* ctx)$/;"	f
X10ResponseGetCrc	context/x10response.c	/^uint16_t X10ResponseGetCrc(X10ResponseContext* ctx)$/;"	f
X10ResponseGetFcode	context/x10response.c	/^uint8_t X10ResponseGetFcode(X10ResponseContext* ctx)$/;"	f
X10ResponseGetLength	context/x10response.c	/^uint8_t X10ResponseGetLength(X10ResponseContext* ctx)$/;"	f
X10ResponseGetOffset	context/x10response.c	/^uint16_t X10ResponseGetOffset(X10ResponseContext* ctx)$/;"	f
X10ResponseGetSlave	context/x10response.c	/^uint8_t X10ResponseGetSlave(X10ResponseContext* ctx)$/;"	f
X10ResponseIndex	context/x10response.h	/^}X10ResponseIndex;$/;"	t	typeref:enum:__anon11
X10ResponseIndexCount0	context/x10response.h	/^	X10ResponseIndexCount0 = 4,$/;"	e	enum:__anon11
X10ResponseIndexCount1	context/x10response.h	/^	X10ResponseIndexCount1 = 5,$/;"	e	enum:__anon11
X10ResponseIndexCrc0	context/x10response.h	/^	X10ResponseIndexCrc0 = 6,$/;"	e	enum:__anon11
X10ResponseIndexCrc1	context/x10response.h	/^	X10ResponseIndexCrc1 = 7,$/;"	e	enum:__anon11
X10ResponseIndexFcode	context/x10response.h	/^	X10ResponseIndexFcode = 1,$/;"	e	enum:__anon11
X10ResponseIndexMax	context/x10response.h	/^	X10ResponseIndexMax = 8,$/;"	e	enum:__anon11
X10ResponseIndexOffset0	context/x10response.h	/^	X10ResponseIndexOffset0 = 2,$/;"	e	enum:__anon11
X10ResponseIndexOffset1	context/x10response.h	/^	X10ResponseIndexOffset1 = 3,$/;"	e	enum:__anon11
X10ResponseIndexSlave	context/x10response.h	/^	X10ResponseIndexSlave = 0,$/;"	e	enum:__anon11
X10ResponseSetCount	context/x10response.c	/^void X10ResponseSetCount(X10ResponseContext* ctx, uint16_t s)$/;"	f
X10ResponseSetCrc	context/x10response.c	/^void X10ResponseSetCrc(X10ResponseContext* ctx, uint16_t s)$/;"	f
X10ResponseSetFcode	context/x10response.c	/^void X10ResponseSetFcode(X10ResponseContext* ctx, uint8_t c)$/;"	f
X10ResponseSetOffset	context/x10response.c	/^void X10ResponseSetOffset(X10ResponseContext* ctx, uint16_t s)$/;"	f
X10ResponseSetSlave	context/x10response.c	/^void X10ResponseSetSlave(X10ResponseContext* ctx, uint8_t c)$/;"	f
X10ResponseShowContext	context/x10response.c	/^void X10ResponseShowContext(X10ResponseContext* ctx)$/;"	f
__ACCESS_TERMIOS_H__	uart/accesstermios.h	2;"	d
__COMPORT_H__	uart/comport.h	2;"	d
__CONTEXT_H__	context/modbuscontext.h	2;"	d
__CRC16_H__	context/modbuscrc16.h	2;"	d
__MCONTEXT_H__	service/mcontext.h	2;"	d
__MODBUS_H__	service/modbus.h	2;"	d
__MODBUS_TYPE_H__	context/modbustype.h	2;"	d
__UART_H__	uart/uart.h	2;"	d
__X03_REQUEST_H__	context/x03request.h	2;"	d
__X03_RESPONSE_H__	context/x03response.h	2;"	d
__X10_REQUEST_H__	context/x10request.h	2;"	d
__X10_RESPONSE_H__	context/x10response.h	2;"	d
__crc_modbus	context/modbuscrc16.c	/^unsigned short __crc_modbus(unsigned char *data, int len)$/;"	f
baud_to_speed	uart/accesstermios.c	/^int baud_to_speed(int baud)$/;"	f
bool	context/modbustype.h	/^typedef unsigned int   bool;$/;"	t
buffer	context/modbuscontext.h	/^	uint8_t buffer[256];$/;"	m	struct:__anon7
com	service/modbus.h	/^	ComPort com;$/;"	m	class:Modbus
context	service/mcontext.h	/^	MBContext context;$/;"	m	class:Mcontext
context	service/modbus.h	/^	ModbusContext context;$/;"	m	class:Modbus
crc_modbus	context/modbuscrc16.h	9;"	d
data	context/x03request.h	/^	uint8_t data[X03RequestIndexMax];$/;"	m	struct:__anon16
data	context/x03response.h	/^	uint8_t data[X03ResponseIndexData + X03ResponseBcountMax + 2];$/;"	m	struct:__anon10
data	context/x10request.h	/^	uint8_t data[X10RequestIndexData + X10RequestBcountMax + 2];$/;"	m	struct:__anon4
data	context/x10response.h	/^	uint8_t data[X10ResponseIndexMax];$/;"	m	struct:__anon13
disable_flow_control	uart/accesstermios.c	/^int disable_flow_control(struct termios *s)$/;"	f
disable_read	uart/accesstermios.c	/^int disable_read(struct termios *s)$/;"	f
enable_flow_control	uart/accesstermios.c	/^int enable_flow_control(struct termios *s)$/;"	f
enable_read	uart/accesstermios.c	/^int enable_read(struct termios *s)$/;"	f
false	context/modbustype.h	13;"	d
fd	uart/comport.h	/^	int fd;$/;"	m	class:ComPort
get_bsize	uart/accesstermios.c	/^int get_bsize(const struct termios *s)$/;"	f
get_ispeed	uart/accesstermios.c	/^int get_ispeed(const struct termios *s)$/;"	f
get_ospeed	uart/accesstermios.c	/^int get_ospeed(const struct termios *s)$/;"	f
get_parity	uart/accesstermios.c	/^char get_parity(const struct termios *s)$/;"	f
get_speed	uart/accesstermios.c	/^int get_speed(const struct termios *s)$/;"	f
get_stop	uart/accesstermios.c	/^int get_stop(const struct termios *s)$/;"	f
get_termios	uart/accesstermios.c	/^int get_termios(int fd, struct termios *s)$/;"	f
index	context/modbuscontext.h	/^	uint8_t index;$/;"	m	struct:__anon7
mac	context/modbuscontext.h	/^	uint8_t mac;$/;"	m	struct:__anon7
main	context/modbuscontext.c	/^int main(void)$/;"	f
main	context/x03request.c	/^int main(void)$/;"	f
main	context/x03response.c	/^int main(void)$/;"	f
main	context/x10request.c	/^int main(void)$/;"	f
main	context/x10response.c	/^int main(void)$/;"	f
main	uart/comport.cpp	/^int main(int argc, char **argv)$/;"	f
set_bsize	uart/accesstermios.c	/^int set_bsize(struct termios *s, int bsize)$/;"	f
set_ispeed	uart/accesstermios.c	/^int set_ispeed(struct termios *s, int speed)$/;"	f
set_ospeed	uart/accesstermios.c	/^int set_ospeed(struct termios *s, int speed)$/;"	f
set_parity	uart/accesstermios.c	/^int set_parity(struct termios *s, char parity)$/;"	f
set_speed	uart/accesstermios.c	/^int set_speed(struct termios *s, int speed)$/;"	f
set_stop	uart/accesstermios.c	/^int set_stop(struct termios *s, int stop)$/;"	f
set_termios	uart/accesstermios.c	/^int set_termios(int fd, const struct termios *s)$/;"	f
show_termios	uart/accesstermios.c	/^void show_termios(const struct termios *s)$/;"	f
speed_to_baud	uart/accesstermios.c	/^int speed_to_baud(int speed)$/;"	f
table_hig	context/modbuscrc16.c	/^static unsigned char table_hig[] =$/;"	v	file:
table_low	context/modbuscrc16.c	/^static unsigned char table_low[] =$/;"	v	file:
true	context/modbustype.h	14;"	d
u16	context/modbustype.h	/^typedef unsigned short u16;$/;"	t
u32	context/modbustype.h	/^typedef unsigned int   u32;$/;"	t
u8	context/modbustype.h	/^typedef unsigned char  u8;$/;"	t
uart_close	uart/uart.c	/^int uart_close(int fd)$/;"	f
uart_config	uart/uart.c	/^int uart_config(int fd, int baud, char parity, int bsize, int stop)$/;"	f
uart_open	uart/uart.c	/^int uart_open(const char *path)$/;"	f
uart_read	uart/uart.c	/^int uart_read(int fd, char *buf, int len)$/;"	f
uart_write	uart/uart.c	/^int uart_write(int fd,  const char *data, int len)$/;"	f
uint16_t	context/modbustype.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	context/modbustype.h	/^typedef unsigned int   uint32_t;$/;"	t
uint8_t	context/modbustype.h	/^typedef unsigned char  uint8_t;$/;"	t
